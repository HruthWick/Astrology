import streamlit as st
from datetime import date, time
import os

# ---------- Groq setup ----------
try:
    from groq import Groq  # pip install groq
    _groq_available = True
except Exception:
    _groq_available = False

GROQ_API_KEY = ("")#please use ur won groq ai api key(its free)
MODEL_NAME = os.getenv("GROQ_MODEL", "llama-3.1-8b-instant")


# ---------- Minimal helpers (no rule text; used only as context) ----------
ZODIAC_DATES = [
    ("Capricorn", (12, 22), (1, 19)),
    ("Aquarius", (1, 20), (2, 18)),
    ("Pisces", (2, 19), (3, 20)),
    ("Aries", (3, 21), (4, 19)),
    ("Taurus", (4, 20), (5, 20)),
    ("Gemini", (5, 21), (6, 20)),
    ("Cancer", (6, 21), (7, 22)),
    ("Leo", (7, 23), (8, 22)),
    ("Virgo", (8, 23), (9, 22)),
    ("Libra", (9, 23), (10, 22)),
    ("Scorpio", (10, 23), (11, 21)),
    ("Sagittarius", (11, 22), (12, 21)),
]

SIGN_ELEMENT = {
    "Aries": "Fire", "Leo": "Fire", "Sagittarius": "Fire",
    "Taurus": "Earth", "Virgo": "Earth", "Capricorn": "Earth",
    "Gemini": "Air", "Libra": "Air", "Aquarius": "Air",
    "Cancer": "Water", "Scorpio": "Water", "Pisces": "Water"
}

def zodiac_sign(d: date) -> str:
    m, day = d.month, d.day
    for sign, (sm, sd), (em, ed) in ZODIAC_DATES:
        if (m == sm and day >= sd) or (m == em and day <= ed) or (sm < em and sm < m < em) or (sm > em and (m > sm or m < em)):
            return sign
    return "Capricorn"

def life_path_number(d: date) -> int:
    s = sum(int(c) for c in d.strftime("%Y%m%d"))
    def reduce(n):
        while n not in (11,22,33) and n > 9:
            n = sum(int(c) for c in str(n))
        return n
    return reduce(s)

def ascendant_bucket(t: time) -> str:
    buckets = ["Visionary", "Diplomat", "Strategist", "Nurturer", "Creator", "Analyst",
               "Connector", "Guardian", "Explorer", "Achiever", "Mystic", "Reformer"]
    return buckets[(t.hour // 2) % len(buckets)]

def groq_chat(messages, temperature=0.8, max_tokens=300) -> str:
    if not (_groq_available and GROQ_API_KEY):
        return "‚ö†Ô∏è Groq AI is not configured. Set GROQ_API_KEY and restart the app."
    client = Groq(api_key=GROQ_API_KEY)
    try:
        resp = client.chat.completions.create(
            model=MODEL_NAME,
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens,
        )
        choice = resp.choices[0]
        msg = getattr(choice, "message", None) or choice["message"]
        content = getattr(msg, "content", None) or msg["content"]
        return content
    except Exception as e:
        return f"‚ö†Ô∏è Groq API error: {e}"


# ---------- UI ----------
st.set_page_config(page_title="AI Astrologer", page_icon="üîÆ", layout="centered")
st.title("üîÆ AI Astrologer")
st.caption("All insights are generated by a Groq LLM.")

with st.form("details"):
    col1, col2 = st.columns(2)
    name = col1.text_input("Name", placeholder="Your full name")
    dob = col1.date_input("Date of Birth", value=date(2000,1,1), format="YYYY-MM-DD")
    tob = col2.time_input("Time of Birth", value=time(12,0,0), step=60)  # 1-minute precision
    birthplace = col2.text_input("Place of Birth (City, Country)", placeholder="e.g., Hyderabad, India")
    submitted = st.form_submit_button("Get My Reading ‚ú®")

# Save profile on submit and generate the main reading once
if submitted:
    if not (_groq_available and GROQ_API_KEY):
        st.error("Groq AI is required. Set GROQ_API_KEY and restart the app.")
    else:
        sign = zodiac_sign(dob)
        element = SIGN_ELEMENT[sign]
        lpn = life_path_number(dob)
        rising = ascendant_bucket(tob)

        st.session_state["has_profile"] = True
        st.session_state["profile"] = {
            "name": name,
            "dob": dob,
            "tob": tob,
            "birthplace": birthplace,
            "sign": sign,
            "element": element,
            "lpn": lpn,
            "rising": rising,
        }

        system_prompt = (
            "You are an empathetic, concise AI astrologer. "
            "Create a short personal reading that blends the user's sun sign, element, life path number (numerology), "
            "and a playful 'rising vibe'. Avoid rigid determinism. Provide 2‚Äì3 specific, practical tips. "
            "Keep it under 140 words. Close with a brief, encouraging line."
        )
        user_context = (
            f"User: {name or 'Friend'} | Sign: {sign} ({element}) | Life Path: {lpn} | Rising vibe: {rising} | "
            f"DOB: {dob.isoformat()} | TOB: {tob.strftime('%H:%M')} | Place: {birthplace or '‚Äî'}"
        )
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Generate my reading.\n\n{user_context}"}
        ]
        with st.spinner("Consulting the stars via Groq..."):
            st.session_state["reading"] = groq_chat(messages, temperature=0.8, max_tokens=280)

# Show profile + reading if available, and keep Q&A outside submit block so it persists
if st.session_state.get("has_profile"):
    prof = st.session_state["profile"]

    st.subheader(f"Hi {prof['name'] or 'Friend'}!")
    st.markdown(
        f"- **Sun sign:** {prof['sign']}\n"
        f"- **Element:** {prof['element']}\n"
        f"- **Life Path Number:** {prof['lpn']}\n"
        f"- **Rising vibe (playful):** {prof['rising']}\n"
        f"- **Birthplace noted:** {prof['birthplace'] or '‚Äî'}"
    )

    st.divider()
    st.subheader("Your Reading")
    st.markdown(st.session_state.get("reading", "‚Äî"))

    st.divider()
    st.subheader("Ask the Astrologer (Free Text)")
    user_q = st.text_area(
        "Ask one question (career, love, health, money, education, travel, etc.)",
        key="qa_text",
        placeholder="e.g., Will I get a promotion this year?"
    )

    if st.button("Get AI Answer üí´", key="qa_button"):
        q_system = (
            "You are the same AI astrologer. Answer the user's single question using their context "
            "(sign, element, life path number, rising vibe). "
            "Give a direct, friendly answer with one actionable step. 120 words max."
        )
        ctx = (
            f"User: {prof['name'] or 'Friend'} | Sign: {prof['sign']} ({prof['element']}) | "
            f"Life Path: {prof['lpn']} | Rising vibe: {prof['rising']} | "
            f"DOB: {prof['dob'].isoformat()} | TOB: {prof['tob'].strftime('%H:%M')} | "
            f"Place: {prof['birthplace'] or '‚Äî'}"
        )
        q_messages = [
            {"role": "system", "content": q_system},
            {"role": "user", "content": f"{ctx}\nQuestion: {user_q}"}
        ]
        with st.spinner("Getting your answer from Groq..."):
            answer = groq_chat(q_messages, temperature=0.9, max_tokens=220)
        st.markdown(answer)

st.markdown("---")
st.caption("Powered by Groq ")

